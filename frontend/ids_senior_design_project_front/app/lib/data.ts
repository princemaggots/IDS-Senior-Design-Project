import { GridColDef } from '@mui/x-data-grid';

export const columns: GridColDef[] = [
    { field: 'id', headerName: 'ID', width: 100 },
    { field: 'model', headerName: 'Model', width: 160 },
    { field: 'dataset', headerName: 'Dataset', width: 160 },
    { field: 'date', headerName: 'Date', width: 160 },
    { field: 'precision', headerName: 'Precision', type: 'number', width: 160 },
    { field: 'recall', headerName: 'Recall', type: 'number', width: 160 },
    { field: 'f1', headerName: 'F1 Score', type: 'number', width: 160 },
];

export const models = [
    { 
        header: 'LCCDE', 
        subHeader: 'Leader Class and Confidence Decision Ensemble', 
        description: 'an ensemble IDS, utilizing XGBoost, LightGBM, and CatBoost to select the best model for each attack class based on performance. It then uses these models and their confidence values for detection decisions.',
        href: './new_session/lccde/configure'
    },
    { 
        header: 'MTH', 
        subHeader: 'Multi-Tiered Hybrid', 
        description: 'an ensemble IDS, utilizing XGBoost, LightGBM, and CatBoost to select the best model for each attack class based on performance. It then uses these models and their confidence values for detection decisions.',
        href: './new_session/mth/configure'
    },
    { 
        header: 'Tree-based', 
        subHeader: 'Tree-based Intelligent IDS', 
        description: 'an ensemble IDS that leverages decision tree, random forest, extra trees, and XGBoost to detect intrusions in both intra-vehicle and external communication networks.',
        href: './new_session/tree_based/configure'
    }
];

export const datasetFields = {
    name: 'dataset',
    type: 'string',
    description: 'CICIDS2017 is a dataset used for cybersecurity research and analysis. It stands for "Canadian Institute for Cybersecurity Intrusion Detection Evaluation Dataset 2017." The dataset contains network traffic data captured in a simulated environment, including various types of cyber attacks and normal activities. Researchers use this dataset to develop and evaluate intrusion detection systems and other cybersecurity solutions. Car-Hacking dataset typically refers to datasets collected from experiments or simulations related to automotive cybersecurity. These datasets often include information about vulnerabilities and potential attacks on modern vehicles electronic control systems. Researchers and cybersecurity professionals use car-hacking datasets to study and address security issues in automotive systems, such as remote attacks, unauthorized access, and potential safety risks associated with vehicle connectivity and automation.',
    label: 'Select Dataset',
    defaultValue: 'Randomly Sampled',
    values: ['Randomly Sampled', 'K Means sampled'],
}

export const treeBasedInputFields = [
    {
        name: 'test_size',
        type: 'number',
        description: 'Proportion of the dataset to include in the test split.',
        label: 'Test Size',
        min: 0,
        max: 1,
        step: 0.1,
        defaultValue: 0.2,
    },
    {
        name: 'feature_selection',
        type: 'number',
        description: 'Method to use for feature selection.',
        label: 'Feature Selection',
        min: 0,
        max: 1,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'feature_selection_threshold',
        type: 'number',
        description: 'Threshold for selecting features based on their relevance scores.',
        label: 'Feature Selection Threshold',
        min: 0,
        max: 1,
        step: 0.1,
        defaultValue: 0.9,
    },
    {
        name: 'dt_criterion',
        type: 'string',
        description: 'Function to measure the quality of a split for Decision Tree Classifier.',
        label: 'DT Criterion',
        defaultValue: 'gini',
        values: ['gini', 'entropy', 'log_loss']
    },
    {
        name: 'dt_splitter',
        type: 'string',
        description: 'Strategy used to choose the split at each node for Decision Tree Classifier.',
        label: 'DT Splitter',
        defaultValue: 'best',
        values: ['best', 'random'] 
    },
    {
        name: 'dt_max_depth',
        type: 'number',
        description: 'Maximum depth of the tree for Decision Tree Classifier.',
        label: 'DT Max Depth',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'dt_min_samples_split',
        type: 'number',
        description: 'Minimum number of samples required to split an internal node for Decision Tree Classifier.',
        label: 'DT Min Samples Split',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'dt_min_samples_leaf',
        type: 'number',
        description: 'Minimum number of samples required to be at a leaf node for Decision Tree Classifier.',
        label: 'DT Min Samples Leaf',
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'dt_min_weight_fraction_leaf',
        type: 'number',
        description: 'Minimum weighted fraction of the sum total of weights required to be at a leaf node for Decision Tree Classifier.',
        label: 'DT Min Weight Fraction Leaf',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'dt_max_features',
        type: 'string',
        description: 'Number of features to consider when looking for the best split for Decision Tree Classifier.',
        label: 'DT Max Features',
        defaultValue: '0',
        values: ['int', 'float', 'sqrt', 'log2', '0']
    },
    {
        name: 'dt_random_state',
        type: 'number',
        description: 'Seed value used by the random number generator for Decision Tree Classifier.',
        label: 'DT Random State',
        min: 0,
        max: 42,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'dt_max_leaf_nodes',
        type: 'number',
        description: 'Grow a tree with maximum leaf nodes for Decision Tree Classifier.',
        label: 'DT Max Leaf Nodes',
        min: 2,
        max: 1000000,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'xg_eta',
        type: 'number',
        description: 'Learning rate for XGBoost Classifier.',
        label: 'XG Eta',
        min: 0,
        max: 1,
        step: 0.01,
        defaultValue: 0.3,
    },
    {
        name: 'xg_max_depth',
        type: 'number',
        description: 'Maximum depth of a tree for XGBoost Classifier.',
        label: 'XG Max Depth',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 6,
    },
    {
        name: 'xg_subsample',
        type: 'number',
        description: 'Subsample ratio of the training instances for XGBoost Classifier.',
        label: 'XG Subsample',
        min: 0,
        max: 1,
        step: 0.01,
        defaultValue: 1,
    },
    {
        name: 'xg_lambda',
        type: 'number',
        description: 'L2 regularization term on weights for XGBoost Classifier.',
        label: 'XG Lambda',
        min: 0,
        max: 1000000,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'xg_alpha',
        type: 'number',
        description: 'L1 regularization term on weights for XGBoost Classifier.',
        label: 'XG Alpha',
        min: 0,
        max: 1000000,
        step: 10,
        defaultValue: 0,
    },
    {
        name: 'xg_gamma',
        type: 'number',
        description: 'Minimum loss reduction required to make a further partition on a leaf node of the tree for XGBoost Classifier.',
        label: 'XG Gamma',
        min: 0,
        max: 1000000,
        step: 10,
        defaultValue: 0,
    },    
    {
        name: 'xg_colsample_bytree',
        type: 'number',
        description: 'Subsample ratio of columns when constructing each tree for XGBoost Classifier.',
        label: 'XG Colsample Bytree',
        min: 0,
        max: 1,
        step: 0.01,
        defaultValue: 1,
    },
    {
        name: 'xg_min_child_weight',
        type: 'number',
        description: 'Minimum sum of instance weight needed in a child for XGBoost Classifier.',
        label: 'XG Min Child Weight',
        min: 0,
        max: 1000000,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'xg_n_estimators',
        type: 'number',
        description: 'Number of trees to fit for XGBoost Classifier.',
        label: 'XG N Estimators',
        min: 1,
        max: 100,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'rf_n_estimators',
        type: 'number',
        description: 'Number of trees in the forest for Random Forest Classifier.',
        label: 'RF N Estimators',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 100,
    },
    {
        name: 'rf_criterion',
        type: 'string',
        description: 'Function to measure the quality of a split for Random Forest Classifier.',
        label: 'RF Criterion',
        defaultValue: 'gini',
        values: ['gini', 'entropy', 'log_loss']
    },
    {
        name: 'rf_max_depth',
        type: 'number',
        description: 'Maximum depth of the tree for Random Forest Classifier.',
        label: 'RF Max Depth',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'rf_min_samples_split',
        type: 'number',
        description: 'Minimum number of samples required to split an internal node for Random Forest Classifier.',
        label: 'RF Min Samples Split', 
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'rf_min_samples_leaf',
        type: 'number',
        description: 'Minimum number of samples required to be at a leaf node for Random Forest Classifier.',
        label: 'RF Min Samples Leaf',
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'rf_min_weight_fractions_leaf',
        type: 'number',
        description: 'Minimum weighted fraction of the sum total of weights required to be at a leaf node for Random Forest Classifier.',
        label: 'RF Min Weight Fraction Leaf',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'rf_max_features',
        type: 'string',
        description: 'Number of features to consider when looking for the best split for Random Forest Classifier.',
        label: 'RF Max Features',
        defaultValue: '0',
        values: ['int', 'float', 'sqrt', 'log2', '0']
    },
    {
        name: 'rf_max_leaf_nodes',
        type: 'number',
        description: 'Grow trees with maximum leaf nodes for Random Forest Classifier.',
        label: 'RF Max Leaf Nodes',
        min: 2,
        max: 1000000,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'rf_random_state',
        type: 'number',
        description: 'Seed value used by the random number generator for Random Forest Classifier.',
        label: 'RF Random State',
        min: 0,
        max: 42,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'et_n_estimators',
        type: 'number',
        description: 'Number of trees in the forest for Extra Trees Classifier.',
        label: 'ET N Estimators',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 100,
    },
    {
        name: 'et_criterion',
        type: 'string',
        description: 'Function to measure the quality of a split for Extra Trees Classifier.',
        label: 'ET Criterion',
        defaultValue: 'gini',
        values: ['gini', 'entropy', 'log_loss']
    },
    {
        name: 'et_max_depth',
        type: 'number',
        description: 'Maximum depth of the tree for Extra Trees Classifier.',
        label: 'ET Max Depth',
        min: 1,
        max: 100000,
        step: 10,
        defaultValue: 1,
    },
    {
        name: 'et_min_samples_split',
        type: 'number',
        description: 'Minimum number of samples required to split an internal node for Extra Trees Classifier.',
        label: 'ET Min Samples Split',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'et_min_samples_leaf',
        type: 'number',
        description: 'Minimum number of samples required to be at a leaf node for Extra Trees Classifier.',
        label: 'ET Min Samples Leaf',
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'et_min_weight_fractions_leaf',
        type: 'number',
        description: 'Minimum weighted fraction of the sum total of weights required to be at a leaf node for Extra Trees Classifier.',
        label: 'ET Min Weight Fraction Leaf',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'et_max_features',
        type: 'string',
        description: 'Number of features to consider when looking for the best split for Extra Trees Classifier.',
        label: 'ET Max Features',
        defaultValue: '0',
        values: ['int', 'float', 'sqrt', 'log2', '0']
    },
    {
        name: 'et_max_leaf_nodes',
        type: 'number',
        description: 'Grow trees with maximum leaf nodes for Extra Trees Classifier.',
        label: 'ET Max Leaf Nodes',
        min: 2,
        max: 1000000,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'et_random_state',
        type: 'number',
        description: 'Seed value used by the random number generator for Extra Trees Classifier.',
        label: 'ET Random State',
        min: 0,
        max: 42,
        step: 1,
        defaultValue: 42,
    },
];

export const mthInputFields = [
    {
        name: 'fcbf_k',
        type: 'number',
        description: 'Feature Correlation Based Filter (FCBF) parameter for determining the relevance of features.',
        label: 'FCBF-K',
        min: 2,
        max: 20,
        step: 1,
        defaultValue: 20,
    },
    {
        name: 'test_size',
        type: 'number',
        description: 'Proportion of the dataset to include in the test split.',
        label: 'Test Size',
        min: 0,
        max: 1,
        step: 0.1,
        defaultValue: 0.2,
    },
    {
        name: 'feature_selection_threshold',
        type: 'number',
        description: 'Threshold for selecting features based on their relevance scores.',
        label: 'Feature Selection Threshold',
        min: 0,
        max: 1,
        step: 0.1,
        defaultValue: 0.9,
    },
    {
        name: 'dt_criterion',
        type: 'string',
        description: 'Function to measure the quality of a split for Decision Tree Classifier.',
        label: 'DT Criterion',
        defaultValue: 'gini',
        values: ['gini', 'entropy', 'log_loss']
    },
    {
        name: 'dt_splitter',
        type: 'string',
        description: 'Strategy used to choose the split at each node for Decision Tree Classifier.',
        label: 'DT Splitter',
        defaultValue: 'best',
        values: ['best', 'random'] 
    },
    {
        name: 'dt_max_depth',
        type: 'number',
        description: 'Maximum depth of the tree for Decision Tree Classifier.',
        label: 'DT Max Depth',
        min: 1,
        max: 1000000,
        step: 100,
        defaultValue: 1,
    },
    {
        name: 'dt_min_samples_split',
        type: 'number',
        description: 'Minimum number of samples required to split an internal node for Decision Tree Classifier.',
        label: 'DT Min Samples Split',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'dt_min_samples_leaf',
        type: 'number',
        description: 'Minimum number of samples required to be at a leaf node for Decision Tree Classifier.',
        label: 'DT Min Samples Leaf',
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'dt_min_weight_fraction_leaf',
        type: 'number',
        description: 'Minimum weighted fraction of the sum total of weights required to be at a leaf node for Decision Tree Classifier.',
        label: 'DT Min Weight Fraction Leaf',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'dt_max_features',
        type: 'string',
        description: 'Number of features to consider when looking for the best split for Decision Tree Classifier.',
        label: 'DT Max Features',
        defaultValue: '0',
        values: ['int', 'float', 'sqrt', 'log2', '0']
    },
    {
        name: 'dt_random_state',
        type: 'number',
        description: 'Seed value used by the random number generator for Decision Tree Classifier.',
        label: 'DT Random State',
        min: 0,
        max: 42,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'dt_max_leaf_nodes',
        type: 'number',
        description: 'Grow a tree with maximum leaf nodes for Decision Tree Classifier.',
        label: 'DT Max Leaf Nodes',
        min: 2,
        max: 1000000,
        step: 1,
        defaultValue: 2,
    },
    {
        name: "xg_eta",
        type: 'number',
        description: "Step size shrinkage used in update to prevent overfitting in XGBoost.",
        label: "XGBoost Eta",
        min: 0.1,
        max: 1.0,
        step: 0.1,
        defaultValue: 0.3
    },
    {
        name: 'xg_max_depth',
        type: 'number',
        description: 'Maximum depth of a tree for XGBoost Classifier.',
        label: 'XG Max Depth',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 6,
    },
    {
        name: 'xg_subsample',
        type: 'number',
        description: 'Subsample ratio of the training instances for XGBoost Classifier.',
        label: 'XG Subsample',
        min: 0,
        max: 1,
        step: 0.01,
        defaultValue: 1,
    },
    {
        name: 'xg_lambda',
        type: 'number',
        description: 'L2 regularization term on weights for XGBoost Classifier.',
        label: 'XG Lambda',
        min: 0,
        max: 1000000,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'xg_alpha',
        type: 'number',
        description: 'L1 regularization term on weights for XGBoost Classifier.',
        label: 'XG Alpha',
        min: 0,
        max: 1000000,
        step: 10,
        defaultValue: 0,
    },
    {
        name: 'xg_gamma',
        type: 'number',
        description: 'Minimum loss reduction required to make a further partition on a leaf node of the tree for XGBoost Classifier.',
        label: 'XG Gamma',
        min: 0,
        max: 1000000,
        step: 10,
        defaultValue: 0,
    },
    {
        name: 'xg_colsample_bytree',
        type: 'number',
        description: 'Subsample ratio of columns when constructing each tree for XGBoost Classifier.',
        label: 'XG Colsample Bytree',
        min: 0,
        max: 1,
        step: 0.01,
        defaultValue: 1,
    },
    {
        name: 'xg_min_child_weight',
        type: 'number',
        description: 'Minimum sum of instance weight needed in a child for XGBoost Classifier.',
        label: 'XG Min Child Weight',
        min: 0,
        max: 1000000,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'xg_n_estimators',
        type: 'number',
        description: 'Number of trees to fit for XGBoost Classifier.',
        label: 'XG N Estimators',
        min: 1,
        max: 100,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'rf_n_estimators',
        type: 'number',
        description: 'Number of trees in the forest for Random Forest Classifier.',
        label: 'RF N Estimators',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 100,
    },
    {
        name: 'rf_criterion',
        type: 'string',
        description: 'Function to measure the quality of a split for Random Forest Classifier.',
        label: 'RF Criterion',
        defaultValue: 'gini',
        values: ['gini', 'entropy', 'log_loss']
    },
    {
        name: 'rf_max_depth',
        type: 'number',
        description: 'Maximum depth of the tree for Random Forest Classifier.',
        label: 'RF Max Depth',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'rf_min_samples_split',
        type: 'number',
        description: 'Minimum number of samples required to split an internal node for Random Forest Classifier.',
        label: 'RF Min Samples Split', 
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'rf_min_samples_leaf',
        type: 'number',
        description: 'Minimum number of samples required to be at a leaf node for Random Forest Classifier.',
        label: 'RF Min Samples Leaf',
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'rf_min_weight_fractions_leaf',
        type: 'number',
        description: 'Minimum weighted fraction of the sum total of weights required to be at a leaf node for Random Forest Classifier.',
        label: 'RF Min Weight Fraction Leaf',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'rf_max_features',
        type: 'string',
        description: 'Number of features to consider when looking for the best split for Random Forest Classifier.',
        label: 'RF Max Features',
        defaultValue: '0',
        values: ['int', 'float', 'sqrt', 'log2', '0']
    },
    {
        name: 'rf_max_leaf_nodes',
        type: 'number',
        description: 'Grow trees with maximum leaf nodes for Random Forest Classifier.',
        label: 'RF Max Leaf Nodes',
        min: 2,
        max: 1000000,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'rf_random_state',
        type: 'number',
        description: 'Seed value used by the random number generator for Random Forest Classifier.',
        label: 'RF Random State',
        min: 0,
        max: 42,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'et_n_estimators',
        type: 'number',
        description: 'Number of trees in the forest for Extra Trees Classifier.',
        label: 'ET N Estimators',
        min: 1,
        max: 1000000,
        step: 1,
        defaultValue: 100,
    },
    {
        name: 'et_criterion',
        type: 'string',
        description: 'Function to measure the quality of a split for Extra Trees Classifier.',
        label: 'ET Criterion',
        defaultValue: 'gini',
        values: ['gini', 'entropy', 'log_loss']
    },
    {
        name: 'et_max_depth',
        type: 'number',
        description: 'Maximum depth of the tree for Extra Trees Classifier.',
        label: 'ET Max Depth',
        min: 1,
        max: 100000,
        step: 10,
        defaultValue: 1,
    },
    {
        name: 'et_min_samples_split',
        type: 'number',
        description: 'Minimum number of samples required to split an internal node for Extra Trees Classifier.',
        label: 'ET Min Samples Split',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'et_min_samples_leaf',
        type: 'number',
        description: 'Minimum number of samples required to be at a leaf node for Extra Trees Classifier.',
        label: 'ET Min Samples Leaf',
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1,
    },
    {
        name: 'et_min_weight_fractions_leaf',
        type: 'number',
        description: 'Minimum weighted fraction of the sum total of weights required to be at a leaf node for Extra Trees Classifier.',
        label: 'ET Min Weight Fraction Leaf',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0,
    },
    {
        name: 'et_max_features',
        type: 'string',
        description: 'Number of features to consider when looking for the best split for Extra Trees Classifier.',
        label: 'ET Max Features',
        defaultValue: '0',
        values: ['int', 'float', 'sqrt', 'log2', '0']
    },
    {
        name: 'et_max_leaf_nodes',
        type: 'number',
        description: 'Grow trees with maximum leaf nodes for Extra Trees Classifier.',
        label: 'ET Max Leaf Nodes',
        min: 2,
        max: 1000000,
        step: 1,
        defaultValue: 2,
    },
    {
        name: 'et_random_state',
        type: 'number',
        description: 'Seed value used by the random number generator for Extra Trees Classifier.',
        label: 'ET Random State',
        min: 0,
        max: 42,
        step: 1,
        defaultValue: 42,
    },
];

export const lccdeInputFields = [
    {
        name: 'test_size',
        type: 'number',
        description: 'The proportion of the dataset to include in the test split.',
        label: 'Test Data Size',
        min: 0,
        max: 1,
        step: 0.1,
        defaultValue: 0.2,
    },
    {
        name: "random_state",
        type: 'number',
        description: "Controls the randomness of the dataset split.",
        label: "Random State",
        min: 0,
        max: 41,
        step: 1,
        defaultValue: 0
    },
    {
        name: "sampling_strat2",
        type: 'number',
        description: "The size of the second sampling strategy.",
        label: "Sampling Strategy 2",
        min: 100,
        max: 5000,
        step: 10,
        defaultValue: 1000
    },
    {
        name: "sampling_strat4",
        type: 'number',
        description: "The size of the fourth sampling strategy.",
        label: "Sampling Strategy 4",
        min: 100,
        max: 5000,
        step: 10,
        defaultValue: 1000
    },
    {
        name: "xg_eta",
        type: 'number',
        description: "Step size shrinkage used in update to prevent overfitting in XGBoost.",
        label: "XGBoost Eta",
        min: 0.1,
        max: 1.0,
        step: 0.1,
        defaultValue: 0.3
    },
    {
        name: "xg_max_depth",
        type: 'number',
        description: "Maximum depth of a tree in XGBoost.",
        label: "XGBoost Max Depth",
        min: 1,
        max: 50,
        step: 1,
        defaultValue: 6
    },
    {
        name: "xg_subsample",
        type: 'number',
        description: "Subsample ratio of the training instances in XGBoost.",
        label: "XGBoost Subsample",
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1
    },
    {
        name: "xg_lambda",
        type: 'number',
        description: "L2 regularization term on weights in XGBoost.",
        label: "XGBoost Lambda",
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1
    },
    {
        name: "xg_alpha",
        type: 'number',
        description: "L1 regularization term on weights in XGBoost.",
        label: "XGBoost Alpha",
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0
    },
    {
        name: "xg_gamma",
        type: 'number',
        description: "Minimum loss reduction required to make a further partition on a leaf node of the tree in XGBoost.",
        label: "XGBoost Gamma",
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0
    },
    {
        name: "xg_colsample_bytree",
        type: 'number',
        description: "Subsample ratio of columns when constructing each tree in XGBoost.",
        label: "XGBoost Colsample by Tree",
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1
    },
    {
        name: "xg_min_child_weight",
        type: 'number',
        description: "Minimum sum of instance weight (hessian) needed in a child in XGBoost.",
        label: "XGBoost Min Child Weight",
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1
    },
    {
        name: "xg_n_estimators",
        type: 'number',
        description: "Number of boosting rounds in XGBoost.",
        label: "XGBoost Number of Estimators",
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1
    },
    {
        name: "cb_iterations",
        type: 'number',
        description: "The number of boosting iterations for CatBoost.",
        label: "CatBoost Iterations",
        min: 10,
        max: 1500,
        step: 10,
        defaultValue: 1000
    },
    {
        name: "cb_learning_rate",
        type: 'number',
        description: "The learning rate for CatBoost.",
        label: "CatBoost Learning Rate",
        min: 0.01,
        max: 0.1,
        step: 0.01,
        defaultValue: 0.03
    },
    {
        name: "cb_depth",
        type: 'number',
        description: "The depth of the trees for CatBoost.",
        label: "CatBoost Depth",
        min: 1,
        max: 30,
        step: 1,
        defaultValue: 6
    },
    {
        name: "cb_random_state",
        type: 'number',
        description: "Controls the randomness of the CatBoost algorithm.",
        label: "CatBoost Random State",
        min: 0,
        max: 41,
        step: 1,
        defaultValue: 0
    },
    {
        name: "cb_loss_function",
        type: 'string',
        description: "The loss function for CatBoost.",
        label: "CatBoost Loss Function",
        defaultValue: "MultiClass",
        values: ["MultiClass"]
    },
    {
        name: "lg_boosting",
        type: 'string',
        description: "The boosting type for LightGBM.",
        label: "LightGBM Boosting",
        defaultValue: "gbdt",
        values: ["gbdt"]
    },
    {
        name: "lg_learning_rate",
        type: 'number',
        description: "The learning rate for LightGBM.",
        label: "LightGBM Learning Rate",
        min: 0.1,
        max: 1.0,
        step: 0.1,
        defaultValue: 0.1
    },
    {
        name: "lg_lambda_l1",
        type: 'number',
        description: "L1 regularization term on weights for LightGBM.",
        label: "LightGBM Lambda L1",
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0
    },
    {
        name: "lg_num_leaves",
        type: 'number',
        description: "Maximum tree leaves for LightGBM.",
        label: "LightGBM Number of Leaves",
        min: 1,
        max: 100,
        step: 1,
        defaultValue: 31
    },
    {
        name: "lg_num_iterations",
        type: 'number',
        description: "The number of boosting iterations for LightGBM.",
        label: "LightGBM Number of Iterations",
        min: 1,
        max: 150,
        step: 1,
        defaultValue: 100
    },
    {
        name: "lg_max_depth",
        type: 'number',
        description: "Maximum depth of the tree model for LightGBM. Negative value means no limit.",
        label: "LightGBM Max Depth",
        min: -10,
        max: 10,
        step: 1,
        defaultValue: -1
    }
];